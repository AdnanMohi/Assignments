{"version":3,"file":"55.1435ab0818f07259b571.js","mappings":"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","sources":["webpack://shared-depsMosaicPlatform/./src/util/lazyLoad.ts","webpack://shared-depsMosaicPlatform/./src/util/allSettled.ts","webpack://shared-depsMosaicPlatform/./src/util/applyTranslationOverrides.ts","webpack://shared-depsMosaicPlatform/./src/util/CDNUrls.ts","webpack://shared-depsMosaicPlatform/./src/util/changePage.ts","webpack://shared-depsMosaicPlatform/./src/util/getCurrentPage.ts","webpack://shared-depsMosaicPlatform/./src/util/addProvider.ts","webpack://shared-depsMosaicPlatform/./src/shared/legacyExternals.ts","webpack://shared-depsMosaicPlatform/./src/util/providerSharedState.ts","webpack://shared-depsMosaicPlatform/./src/index.ts","webpack://shared-depsMosaicPlatform/./src/util/dismissProvider.ts"],"sourcesContent":["import { setHostData } from '@indeed/mosaic-provider-utils/dist/web/_internal/setup/providerData';\nimport { hasPreviouslyBeenRendered } from '@indeed/mosaic-provider-utils/dist/web/_internal/render';\n/**\n * Lazy-loading enables known providers to defer loading their static assets\n *\n * Begins loading a provider's static assets. The provider's JavaScript\n * bundle registers a `mount` function to the global object when executed\n *\n * The most common use case of a lazy component is via React;\n * <MosaicProvider id=\"mosaic-provider-base-nodejs\" />\n */\nexport const registerProvider = (id, hostData) => {\n    return new Promise((resolve, reject) => {\n        assertProviderIsLazy(id);\n        setHostData(id, hostData);\n        window.mosaic.lazyFns[id].register().then(resolve, reject);\n    });\n};\n/**\n * Cache for storing the latest render of the provider.\n */\nconst renderingCache = new Map();\n/**\n * Function that can be called if you only ever want to render the provider once when there are chances that it\n * could have been rendered multiple times, e.g. rendering each time a button is pressed.\n */\nexport const renderProviderOnce = (id, hostData, shouldPrerender = true) => {\n    var _a;\n    return (_a = renderingCache.get(id)) !== null && _a !== void 0 ? _a : renderProvider(id, hostData, shouldPrerender);\n};\n/**\n * Callback for when a provider is unmounted so we can clear some caches about this provider.\n *\n * @param id provider id that was unmounted\n */\nexport const providerUnmounted = (id) => {\n    renderingCache.delete(id);\n};\n/**\n * Lazy-loading enables known providers to defer loading their static assets\n *\n * Begins loading a provider's static assets, then executes the provider's\n * `mount` function to assume control of rendering the provider's content\n *\n * The most common use case of a lazy component is via React;\n * <MosaicProvider id=\"mosaic-provider-base-nodejs\" />\n */\nexport const renderProvider = (id, hostData, shouldPrerender = true) => {\n    const renderingPromise = new Promise((resolve, reject) => {\n        assertProviderIsLazy(id);\n        injectProviderHtml(id, shouldPrerender);\n        setHostData(id, hostData);\n        window.mosaic.lazyFns[id]\n            .register()\n            .then(({ mount }) => {\n            resolve(mount());\n        })\n            .catch(reject);\n    });\n    renderingCache.set(id, renderingPromise);\n    return renderingPromise;\n};\n/**\n * @deprecated Use renderProvider instead\n * Lazy-loading enables known providers to defer loading their static assets\n *\n * Begins loading a provider's static assets, then executes the provider's\n * `mount` function to assume control of rendering the provider's content\n *\n * The most common use case of a lazy component is via React;\n * <MosaicProvider id=\"mosaic-provider-base-nodejs\" />\n */\nexport const lazyLoad = renderProvider;\nexport const injectProviderHtml = (id, shouldPrerender) => {\n    const ssrHtml = window.mosaic.lazyProviders[id];\n    const providerDiv = document.querySelector('#' + id);\n    assertProviderDOMPresent(id, providerDiv);\n    if (shouldPrerender && ssrHtml && !hasPreviouslyBeenRendered(id)) {\n        providerDiv.innerHTML = ssrHtml;\n        // Relocate emotion styles to the head for just this provider, before hydration\n        // Reference: https://github.com/emotion-js/emotion/blob/1135f8e9d97ea711eb483368313afdfe7b176845/packages/cache/src/index.js#L56\n        const ssrStyles = providerDiv === null || providerDiv === void 0 ? void 0 : providerDiv.querySelectorAll(`style[data-emotion]:not([data-s])`);\n        ssrStyles === null || ssrStyles === void 0 ? void 0 : ssrStyles.forEach((node) => {\n            const dataEmotionAttribute = node.getAttribute('data-emotion');\n            if (!dataEmotionAttribute || dataEmotionAttribute.indexOf(' ') === -1) {\n                return;\n            }\n            document.head.appendChild(node);\n            node.setAttribute('data-s', '');\n        });\n    }\n};\nfunction assertProviderIsLazy(providerId) {\n    if (!window.mosaic.lazyFns[providerId]) {\n        const err = new Error(`Unable to load ${providerId} because it was not initialized or was eagerly loaded. ` +\n            'Check that the host backend received a valid provider response and that the final ' +\n            'merged provider configuration has isLazy = true');\n        // @ts-ignore\n        err.reason = 'lazy_provider_not_initialized';\n        throw err;\n    }\n}\nfunction assertProviderDOMPresent(providerId, providerDiv) {\n    if (!providerDiv) {\n        throw new Error(`Unable to render lazy provider ${providerId} because provider div was missing. Check that the desired ` +\n            `zone is being rendered on the page, and that the provider or zone has isLazy=true in the zone ` +\n            `artifact and final merged configuration.`);\n    }\n}\n","export function allSettled(promises) {\n    const handled = promises.map((promise) => {\n        return Promise.resolve(promise).then((value) => ({ status: 'fulfilled', value }), (reason) => ({ status: 'rejected', reason }));\n    });\n    return Promise.all(handled);\n}\n","var _a;\nconst docCreateRange = (_a = document === null || document === void 0 ? void 0 : document.createRange) === null || _a === void 0 ? void 0 : _a.bind(document);\nexport function applyTranslationOverrides(translationScript, nodeToAppend = document.body, createRange = docCreateRange) {\n    try {\n        const fragment = createRange().createContextualFragment(`<script>\n                var overrides = (window.mosaic && window.mosaic.i18nOverrides) || {};\n                (function() {${translationScript}}).bind(overrides)();\n            </script>`);\n        nodeToAppend.appendChild(fragment);\n    }\n    catch (e) {\n        console === null || console === void 0 ? void 0 : console.warn('Error creating range for translation override script application', e);\n    }\n}\n","const AD_BLOCKED_CDN = \"d3fw5vlhllyvee.cloudfront.net\";\nconst WORKING_CDN = \"c03.s3.indeed.com\";\nexport function translateUrl(originalUrl) {\n    return originalUrl.replace(AD_BLOCKED_CDN, WORKING_CDN);\n}\n;\n","import { log as logChangePageDebug, AvroOptional } from '@indeed/signals-schema/com/indeed/signals/schema/mosaic/MosaicChangePageDebug';\nimport { isRenderable } from '@indeed/mosaic-provider-utils/dist/web/types/MosaicInitializationModel';\nimport { registerProvider } from './lazyLoad';\nimport { allSettled } from './allSettled';\nimport { MosaicStateManager } from '@indeed/mosaic-provider-utils/dist/web/state/MosaicStateManager';\nimport { isTestBucketActiveInBrowser } from '@indeed/mosaic-provider-utils/dist/web/_internal/utils/ProctorHelper';\nimport { applyTranslationOverrides } from './applyTranslationOverrides';\nimport { translateUrl } from \"./CDNUrls\";\nclass ChangePageResultImpl {\n    constructor(newRegistrations, previousPage) {\n        this.previousPage = previousPage;\n        this._newRegistrations = newRegistrations;\n        this._map = new Map(newRegistrations);\n    }\n    get(providerId) {\n        return this._map.get(providerId);\n    }\n    allSettled() {\n        const registrations = this._newRegistrations.map(([, promise]) => promise);\n        return allSettled(registrations);\n    }\n}\nfunction hasOwnProperty(obj, prop) {\n    return obj.hasOwnProperty(prop);\n}\nfunction asChangeModel(initializationModel) {\n    if (!hasOwnProperty(initializationModel, 'platform')) {\n        return initializationModel;\n    }\n    else {\n        const initModel = initializationModel;\n        return {\n            pageId: initModel.host.pageId,\n            logTk: initModel.host.logTk,\n            platformLogTk: initModel.platform.platformLogTk,\n            providers: initModel.provider,\n            hostId: initModel.host.hostId\n        };\n    }\n}\n/**\n * `changePage` accepts an object with new initialization data, and an options parameter to specify zone update strategies\n * into the initialization data Mosaic stores on the global object (window.mosaic)\n *\n * In addition to allowing new providers to be discovered after the page initially loads,\n * this function allows the current page and log tracking key to be changed, making it\n * possible to properly attribute client-side events after a \"soft\" navigation\n *\n * @param mosaicGlobal The property of the global object that contains Mosaic data (usually, window.mosaic)\n * @param initializationModel Object containing new initialization data\n * @param options parameter options for changePage API, including record of zoneUpdateStrategies\n */\nexport function changePage(mosaicGlobal, initializationModel, options) {\n    if (isTestBucketActiveInBrowser('mosaic_change_page_debug_tst', 'active')) {\n        logChangePageDebug({\n            hostId: AvroOptional.string(mosaicGlobal.initialData.hostId),\n            pageId: AvroOptional.string(mosaicGlobal.initialData.pageId),\n            initializationModel: AvroOptional.string(JSON.stringify(initializationModel))\n        });\n    }\n    const { platformLogTk, logTk, pageId, hostId, providers: newProviders = {} } = asChangeModel(initializationModel);\n    const previousPage = {\n        pageId: mosaicGlobal.initialData.pageId,\n        platformLogTk: mosaicGlobal.initialData.platformLogTk,\n        logTk: mosaicGlobal.initialData.logTk,\n        hostId: mosaicGlobal.initialData.hostId\n    };\n    mosaicGlobal.initialData.platformLogTk = platformLogTk;\n    mosaicGlobal.initialData.logTk = logTk;\n    mosaicGlobal.initialData.pageId = pageId;\n    mosaicGlobal.initialData.hostId = hostId || previousPage.hostId;\n    // set the current page attribute on the state manager so that the\n    // host state observer will update\n    MosaicStateManager.mosaicState.currentPage = `${hostId}:${pageId || 'unknown'}`;\n    if (mosaicGlobal.initialData.platformData &&\n        hasOwnProperty(initializationModel, 'platform') &&\n        initializationModel.platform.debug) {\n        mosaicGlobal.initialData.platformData.providerRequest =\n            initializationModel.platform.debug.request;\n    }\n    const newProvidersByZone = {};\n    const providerScriptsToInitialize = {};\n    const providerI18nScriptsToInitialize = {};\n    if (!mosaicGlobal._loadProviders) {\n        throw new Error('window.mosaic._loadProviders has not been initialized');\n    }\n    Object.keys(newProviders).forEach((providerId) => {\n        var _a, _b;\n        const newProvider = newProviders[providerId];\n        // If the provider response isn't renderable, don't include it in the update\n        if (!isRenderable(newProvider.result)) {\n            return;\n        }\n        mosaicGlobal.cssResetProviders[providerId] = newProvider.shouldResetCss;\n        mosaicGlobal.providerData[providerId] = newProvider.initialData;\n        if (newProvider.loadMethod) {\n            mosaicGlobal.providerLoadMethod = mosaicGlobal.providerLoadMethod || {};\n            mosaicGlobal.providerLoadMethod[providerId] = newProvider.loadMethod.toLowerCase();\n        }\n        if (newProvider.publicPath) {\n            mosaicGlobal.publicPaths = mosaicGlobal.publicPaths || {};\n            mosaicGlobal.publicPaths[providerId] = translateUrl(newProvider.publicPath);\n        }\n        // Create platformLogTkLookup if it doesn't exist on mosaicGlobal already\n        // so that we can keep track of the platformLogTK that should be associated\n        // with each provider\n        mosaicGlobal.platformLogTkLookup = mosaicGlobal.platformLogTkLookup || {};\n        mosaicGlobal.platformLogTkLookup[providerId] = (_a = newProvider.platformLogTk) !== null && _a !== void 0 ? _a : platformLogTk;\n        mosaicGlobal.shouldLogProviderContainerClicks =\n            mosaicGlobal.shouldLogProviderContainerClicks || {};\n        mosaicGlobal.shouldLogProviderContainerClicks[providerId] =\n            newProvider.shouldLogContainerClicks;\n        if (!mosaicGlobal.providerCss) {\n            mosaicGlobal.providerCss = {};\n        }\n        if (newProvider.assets.cssUrl) {\n            mosaicGlobal.providerCss[providerId] = newProvider.assets.cssUrl;\n        }\n        if (mosaicGlobal.serviceIdLookup) {\n            mosaicGlobal.serviceIdLookup[providerId] = newProvider.serviceId;\n        }\n        if (mosaicGlobal.initialData.platformData && newProvider.debug) {\n            mosaicGlobal.initialData.platformData.metaData[providerId] = newProvider.debug.metadata;\n            mosaicGlobal.initialData.platformData.providerData[providerId] =\n                newProvider.debug.response;\n        }\n        if (newProvider.assets.jsUrl) {\n            mosaicGlobal.providers[providerId] = newProvider.assets.jsUrl;\n            providerScriptsToInitialize[providerId] = newProvider.assets.jsUrl;\n        }\n        if (newProvider.assets.i18nUrl) {\n            mosaicGlobal.provideri18N[providerId] = newProvider.assets.i18nUrl;\n            providerI18nScriptsToInitialize[providerId] = newProvider.assets.i18nUrl;\n        }\n        if (newProvider.assets.i18nOverrides) {\n            applyTranslationOverrides(newProvider.assets.i18nOverrides);\n        }\n        if (mosaicGlobal.canaryProviders) {\n            mosaicGlobal.canaryProviders[providerId] = newProvider.isCanary;\n        }\n        // CAUTION! This makes both lazy and non-lazy providers behave as lazy providers\n        // that means \"eager\" providers *won't be rendered* unless something else calls\n        // `renderAndMount` or `loadProvider`. This is because extra control is usually needed\n        // when navigating to a new SPA page (for example, to prevent rendering provider SSR\n        // content before styles have been loaded)\n        mosaicGlobal.lazyProviders[providerId] = newProvider.serverRenderedContent || '';\n        if (newProvider.zoneId) {\n            newProvidersByZone[providerId] = newProvider.zoneId;\n        }\n        if (newProvider.errors) {\n            const existingErrors = mosaicGlobal.providerErrors[providerId];\n            if (existingErrors && !Array.isArray(existingErrors)) {\n                mosaicGlobal.providerErrors[providerId] = [existingErrors];\n            }\n            else if (!existingErrors) {\n                mosaicGlobal.providerErrors[providerId] = [];\n            }\n            (_b = mosaicGlobal.providerErrors[providerId]) === null || _b === void 0 ? void 0 : _b.push(newProvider.errors);\n        }\n    });\n    // Updates the zone map to ensure updated providers are in the correct zone and not\n    // duplicated, using the following algorithm:\n    //  1. Generate map of provider:zone from new initialization model, only keep merge update strategies zones\n    //  2. Generate map of provider:zone from existing zone map\n    //  3. Merge objects (zone ids from the new initialization model overwrite existing map)\n    //  4. Transform back to zone map structure\n    const prevProvidersByZone = {};\n    Object.keys(mosaicGlobal.zonedProviders)\n        .filter((zoneId) => { var _a; return ((_a = options === null || options === void 0 ? void 0 : options.zoneUpdateStrategies) === null || _a === void 0 ? void 0 : _a[zoneId]) !== 'replace'; })\n        .forEach((zoneId) => {\n        const providersInZone = mosaicGlobal.zonedProviders[zoneId];\n        providersInZone.forEach((providerId) => {\n            prevProvidersByZone[providerId] = zoneId;\n        });\n    });\n    const merged = Object.assign(Object.assign({}, prevProvidersByZone), newProvidersByZone);\n    const updatedZonedProviders = {};\n    Object.keys(merged).forEach((providerId) => {\n        const zoneId = merged[providerId];\n        updatedZonedProviders[zoneId] = updatedZonedProviders[zoneId] || [];\n        updatedZonedProviders[zoneId].push(providerId);\n    });\n    mosaicGlobal.zonedProviders = updatedZonedProviders;\n    // When this promise resolves, every lazy provider will be ready to load its assets\n    const loadAll = mosaicGlobal._loadProviders(providerScriptsToInitialize, providerI18nScriptsToInitialize);\n    // Begin loading static assets for all newly-discovered providers. This does not attempt\n    // to render provider content, but is the earliest opportunity to load scripts and styles\n    const providerRegistrations = Object.keys(newProviders)\n        // The visible load method is not included in this filter by choice. This may cause a layout shift depending on\n        // whether changePage puts SSR content or null in situations where a provider is immediately in the viewport for\n        // visible load methods for example. This is a tradeoff that may need to be decided or reworked later.\n        .filter((providerId) => {\n        return (isRenderable(newProviders[providerId].result) &&\n            (newProviders[providerId].loadMethod === 'immediate' ||\n                !newProviders[providerId].loadMethod));\n    })\n        .map((providerId) => {\n        return [providerId, loadAll.then(() => registerProvider(providerId))];\n    });\n    // Emit an event for the platform to hook into\n    window.dispatchEvent(new Event('mosaic_page_changed'));\n    return new ChangePageResultImpl(providerRegistrations, previousPage);\n}\n","function getProviderZone(zones, providerId) {\n    for (const zoneId of Object.keys(zones)) {\n        if (zones[zoneId].indexOf(providerId) > -1) {\n            return zoneId;\n        }\n    }\n}\nexport function getCurrentPage(mosaicGlobal) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    const providers = {};\n    for (const providerId of Object.keys(mosaicGlobal.providers)) {\n        providers[providerId] = {\n            providerId,\n            serviceId: (_b = (_a = mosaicGlobal.serviceIdLookup) === null || _a === void 0 ? void 0 : _a[providerId]) !== null && _b !== void 0 ? _b : providerId,\n            zoneId: getProviderZone(mosaicGlobal.zonedProviders, providerId),\n            result: 'enabled',\n            initialData: mosaicGlobal.providerData[providerId],\n            errors: ((_c = mosaicGlobal.providerErrors[providerId]) !== null && _c !== void 0 ? _c : [])[0],\n            assets: {\n                jsUrl: mosaicGlobal.providers[providerId],\n                cssUrl: (_d = mosaicGlobal.providerCss) === null || _d === void 0 ? void 0 : _d[providerId],\n                i18nUrl: mosaicGlobal.provideri18N[providerId]\n            },\n            serverRenderedContent: mosaicGlobal.lazyProviders[providerId],\n            isCanary: (_f = (_e = mosaicGlobal.canaryProviders) === null || _e === void 0 ? void 0 : _e[providerId]) !== null && _f !== void 0 ? _f : false,\n            isLazy: providerId in mosaicGlobal.lazyProviders,\n            shouldLogContainerClicks: (_h = (_g = mosaicGlobal.shouldLogProviderContainerClicks) === null || _g === void 0 ? void 0 : _g[providerId]) !== null && _h !== void 0 ? _h : false,\n            platformLogTk: (_k = (_j = mosaicGlobal.platformLogTkLookup) === null || _j === void 0 ? void 0 : _j[providerId]) !== null && _k !== void 0 ? _k : mosaicGlobal.initialData.platformLogTk,\n            shouldResetCss: mosaicGlobal.cssResetProviders[providerId],\n            publicPath: (_l = mosaicGlobal.publicPaths) === null || _l === void 0 ? void 0 : _l[providerId],\n            loadMethod: (_m = mosaicGlobal.providerLoadMethod) === null || _m === void 0 ? void 0 : _m[providerId],\n        };\n    }\n    return {\n        pageId: mosaicGlobal.initialData.pageId,\n        platformLogTk: mosaicGlobal.initialData.platformLogTk,\n        logTk: mosaicGlobal.initialData.logTk,\n        hostId: mosaicGlobal.initialData.hostId,\n        providers\n    };\n}\n","import { log as logChangePageDebug, AvroOptional } from '@indeed/signals-schema/com/indeed/signals/schema/mosaic/MosaicChangePageDebug';\nimport { isRenderable } from '@indeed/mosaic-provider-utils/dist/web/types/MosaicInitializationModel';\nimport { registerProvider } from './lazyLoad';\nimport { allSettled } from './allSettled';\nimport { applyTranslationOverrides } from './applyTranslationOverrides';\nimport { isTestBucketActiveInBrowser } from '@indeed/mosaic-provider-utils/dist/web/_internal/utils/ProctorHelper';\nimport { translateUrl } from \"./CDNUrls\";\nexport class AddProviderResultImpl {\n    constructor(newRegistrations) {\n        this._newRegistrations = newRegistrations;\n        this._map = new Map(newRegistrations);\n    }\n    get(providerId) {\n        return this._map.get(providerId);\n    }\n    allSettled() {\n        const registrations = this._newRegistrations.map(([, promise]) => promise);\n        return allSettled(registrations);\n    }\n}\n/**\n * `addProvider` accepts an object with new initialization data, and merges the updates\n * into the initialization data Mosaic stores on the global object (window.mosaic)\n *\n * `addProvider` is distinct from `changePage` in that it will not update mosaicGlobal\n * attributes, meaning that it will not break log joining.\n *\n * @param mosaicGlobal The property of the global object that contains Mosaic data (usually, window.mosaic)\n * @param providers list of providers to add to the page\n */\nexport function addProvider(mosaicGlobal, ...providers) {\n    const newProvidersByZone = {};\n    const providerScriptsToInitialize = {};\n    const providerI18nScriptsToInitialize = {};\n    if (!mosaicGlobal._loadProviders) {\n        throw new Error('window.mosaic._loadProviders has not been initialized');\n    }\n    if (isTestBucketActiveInBrowser('mosaic_change_page_debug_tst', 'active')) {\n        logChangePageDebug({\n            hostId: AvroOptional.string(mosaicGlobal.initialData.hostId),\n            pageId: AvroOptional.string(mosaicGlobal.initialData.pageId),\n            providerList: AvroOptional.string(JSON.stringify(providers))\n        });\n    }\n    providers.forEach((provider) => {\n        var _a, _b;\n        if (!isRenderable(provider.result)) {\n            return;\n        }\n        const providerId = provider.providerId;\n        mosaicGlobal.cssResetProviders[providerId] = provider.shouldResetCss;\n        mosaicGlobal.providerData[providerId] = provider.initialData;\n        if (provider.publicPath) {\n            mosaicGlobal.publicPaths = mosaicGlobal.publicPaths || {};\n            mosaicGlobal.publicPaths[providerId] = translateUrl(provider.publicPath);\n        }\n        if (provider.loadMethod) {\n            mosaicGlobal.providerLoadMethod = mosaicGlobal.providerLoadMethod || {};\n            mosaicGlobal.providerLoadMethod[providerId] = provider.loadMethod.toLowerCase();\n        }\n        // Create platformLogTkLookup if it doesn't exist on mosaicGlobal already\n        // so that we can keep track of the platformLogTK that should be associated\n        // with each provider\n        mosaicGlobal.platformLogTkLookup = mosaicGlobal.platformLogTkLookup || {};\n        mosaicGlobal.platformLogTkLookup[providerId] =\n            (_a = provider.platformLogTk) !== null && _a !== void 0 ? _a : mosaicGlobal.initialData.platformLogTk;\n        mosaicGlobal.shouldLogProviderContainerClicks =\n            mosaicGlobal.shouldLogProviderContainerClicks || {};\n        mosaicGlobal.shouldLogProviderContainerClicks[providerId] =\n            provider.shouldLogContainerClicks;\n        if (!mosaicGlobal.providerCss) {\n            mosaicGlobal.providerCss = {};\n        }\n        if (provider.assets.cssUrl) {\n            mosaicGlobal.providerCss[providerId] = provider.assets.cssUrl;\n        }\n        if (mosaicGlobal.serviceIdLookup) {\n            mosaicGlobal.serviceIdLookup[providerId] = provider.serviceId;\n        }\n        if (mosaicGlobal.initialData.platformData && provider.debug) {\n            mosaicGlobal.initialData.platformData.metaData[providerId] = provider.debug.metadata;\n            mosaicGlobal.initialData.platformData.providerData[providerId] =\n                provider.debug.response;\n        }\n        if (provider.assets.jsUrl) {\n            mosaicGlobal.providers[providerId] = provider.assets.jsUrl;\n            providerScriptsToInitialize[providerId] = provider.assets.jsUrl;\n        }\n        if (provider.assets.i18nUrl) {\n            mosaicGlobal.provideri18N[providerId] = provider.assets.i18nUrl;\n            providerI18nScriptsToInitialize[providerId] = provider.assets.i18nUrl;\n        }\n        if (provider.assets.i18nOverrides) {\n            applyTranslationOverrides(provider.assets.i18nOverrides);\n        }\n        if (mosaicGlobal.canaryProviders) {\n            mosaicGlobal.canaryProviders[providerId] = provider.isCanary;\n        }\n        // CAUTION! This makes both lazy and non-lazy providers behave as lazy providers\n        // that means \"eager\" providers *won't be rendered* unless something else calls\n        // `renderAndMount` or `loadProvider`. This is because extra control is usually needed\n        // when navigating to a new SPA page (for example, to prevent rendering provider SSR\n        // content before styles have been loaded)\n        mosaicGlobal.lazyProviders[providerId] = provider.serverRenderedContent || '';\n        if (provider.zoneId) {\n            newProvidersByZone[providerId] = provider.zoneId;\n        }\n        if (provider.errors) {\n            const existingErrors = mosaicGlobal.providerErrors[providerId];\n            if (existingErrors && !Array.isArray(existingErrors)) {\n                mosaicGlobal.providerErrors[providerId] = [existingErrors];\n            }\n            else if (!existingErrors) {\n                mosaicGlobal.providerErrors[providerId] = [];\n            }\n            (_b = mosaicGlobal.providerErrors[providerId]) === null || _b === void 0 ? void 0 : _b.push(provider.errors);\n        }\n    });\n    // Updates the zone map to ensure updated providers are in the correct zone and not\n    // duplicated, using the following algorithm:\n    //  1. Generate map of provider:zone from new initialization model\n    //  2. Generate map of provider:zone from existing zone map\n    //  3. Merge objects (zone ids from the new initialization model overwrite existing map)\n    //  4. Transform back to zone map structure\n    const prevProvidersByZone = {};\n    Object.keys(mosaicGlobal.zonedProviders).forEach((zoneId) => {\n        const providersInZone = mosaicGlobal.zonedProviders[zoneId];\n        providersInZone.forEach((providerId) => {\n            prevProvidersByZone[providerId] = zoneId;\n        });\n    });\n    const merged = Object.assign(Object.assign({}, prevProvidersByZone), newProvidersByZone);\n    const updatedZonedProviders = {};\n    Object.keys(merged).forEach((providerId) => {\n        const zoneId = merged[providerId];\n        updatedZonedProviders[zoneId] = updatedZonedProviders[zoneId] || [];\n        updatedZonedProviders[zoneId].push(providerId);\n    });\n    mosaicGlobal.zonedProviders = updatedZonedProviders;\n    // When this promise resolves, every lazy provider will be ready to load its assets\n    const loadAll = mosaicGlobal._loadProviders(providerScriptsToInitialize, providerI18nScriptsToInitialize);\n    // // Begin loading static assets for all newly-discovered providers. This does not attempt\n    // // to render provider content, but is the earliest opportunity to load scripts and styles\n    const providerRegistrations = providers\n        .filter((provider) => {\n        // The visible load method is not included in this filter by choice. This may cause a layout shift depending on\n        // whether changePage puts SSR content or null in situations where a provider is immediately in the viewport for\n        // visible load methods for example. This is a tradeoff that may need to be decided or reworked later.\n        return (isRenderable(provider.result) &&\n            (provider.loadMethod === 'immediate' || !provider.loadMethod));\n    })\n        .map((provider) => {\n        return [provider.providerId, loadAll.then(() => registerProvider(provider.providerId))];\n    });\n    return new AddProviderResultImpl(providerRegistrations);\n}\n","/**\n * Legacy dependencies that are externalized from provider builds and supplied\n * by the platform as globals\n */\nimport * as mobx from 'mobx';\nimport * as mobxReact from 'mobx-react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// ICL Component Imports\nimport Button from '@indeed/frontend-components-react/components/Button';\nimport Card from '@indeed/frontend-components-react/components/Card';\nimport Icon from '@indeed/frontend-components-react/components/Icon';\nimport Modal from '@indeed/frontend-components-react/components/Modal';\n// ICL Form Component Imports\nimport Checkbox from '@indeed/frontend-components-react/components/Forms/Checkbox';\nimport Select from '@indeed/frontend-components-react/components/Forms/Select';\nimport Textarea from '@indeed/frontend-components-react/components/Forms/Textarea';\nimport TextInput from '@indeed/frontend-components-react/components/Forms/TextInput';\nexport const globals = {\n    mobx,\n    mobxReact,\n    React,\n    ReactDOM,\n    components: {\n        Button,\n        Card,\n        Icon,\n        Modal,\n        forms: {\n            Checkbox,\n            Select,\n            Textarea,\n            TextInput\n        }\n    }\n};\n","export const ProviderSharedStateStore = {\n    states: new Map(),\n    get currentPage() {\n        var _a, _b, _c, _d;\n        return typeof window !== 'undefined'\n            ? `${(_b = (_a = window.mosaic) === null || _a === void 0 ? void 0 : _a.initialData) === null || _b === void 0 ? void 0 : _b.hostId}:${((_d = (_c = window.mosaic) === null || _c === void 0 ? void 0 : _c.initialData) === null || _d === void 0 ? void 0 : _d.pageId) || 'unknown'}`\n            : 'unknown';\n    },\n    get currentPageStates() {\n        if (!this.states.has(this.currentPage)) {\n            this.states.set(this.currentPage, new Map());\n        }\n        // We initialize with an empty map above if missing so we know this won't be undefined\n        return this.states.get(this.currentPage);\n    },\n    setState(store, providerId = '__host__') {\n        this.currentPageStates.set(providerId, store);\n    },\n    getState(providerId = '__host__') {\n        var _a;\n        return (_a = this.currentPageStates) === null || _a === void 0 ? void 0 : _a.get(providerId);\n    },\n};\n","var _a;\n// destyle.css is used for the Mosaic CSS reset\nimport './style/index.scss';\nimport { MosaicStateManager } from '@indeed/mosaic-provider-utils/dist/web/state/MosaicStateManager';\nimport { renderProviderOnce, registerProvider, renderProvider, providerUnmounted } from './util/lazyLoad';\nimport { changePage } from './util/changePage';\nimport { getCurrentPage } from './util/getCurrentPage';\nimport { addProvider } from './util/addProvider';\nimport { dismissProvider } from './util/dismissProvider';\n// Platform-provided federated dependencies aren't used directly, but need to be\n// imported to ensure they're part of the dependency graph of the compilation\nimport './shared/federatedModules';\n// Platform-provided legacy externalized dependencies are assigned to the global\n// object. Will be replaced by providers adopting federation\nimport { globals } from './shared/legacyExternals';\nimport { ProviderSharedStateStore } from './util/providerSharedState';\n/**\n * Setting this global enables providers to use the common dependencies\n */\nwindow.mosaic = (_a = window.mosaic) !== null && _a !== void 0 ? _a : {};\nwindow.mosaic.globals = globals;\n// Initialize Mosaic State\n// @ts-ignore\nwindow.mosaic.state = MosaicStateManager.getInstance();\n// Initialize Provider Shared State\nwindow.mosaic.providerSharedState = ProviderSharedStateStore;\nwindow.mosaic.api = {\n    loadProvider: renderProvider,\n    registerProvider,\n    renderProvider,\n    renderProviderOnce,\n    providerUnmounted,\n    changePage: (initializationModel, options) => {\n        return changePage(window.mosaic, initializationModel, options);\n    },\n    addProvider: (provider) => {\n        return addProvider(window.mosaic, provider);\n    },\n    dismissProvider: (providerId, expiration) => {\n        return dismissProvider(window.mosaic, providerId, expiration);\n    },\n    get currentPage() {\n        return getCurrentPage(window.mosaic);\n    }\n};\n","/**\n * Sends a dismiss signal to the dismiss API where it persisted\n */\nexport const dismissProvider = (mosaicGlobal, providerId, expiration) => {\n    var _a;\n    const { url, apiKey } = ((_a = mosaicGlobal.config) === null || _a === void 0 ? void 0 : _a.endpoints.federator) || {};\n    const { hostId, pageId, country, ctk, logTk, logTkTypeName } = mosaicGlobal.initialData;\n    if (!url || !apiKey || !logTkTypeName) {\n        return;\n    }\n    const graphQLVariables = {\n        input: {\n            expiration: expiration || null,\n            mosaicProviderInput: {\n                providerId: providerId,\n                hostId: hostId,\n                pageId: pageId\n            },\n            trackingKey: logTk,\n            trackingKeyType: logTkTypeName\n        }\n    };\n    const graphQLQuery = `mutation recordMosaicOptOut($input: RecordMosaicOptOutInput!) {\n        recordMosaicOptOut(input: $input) {\n            ctk\n        }\n    }`;\n    const body = {\n        query: graphQLQuery,\n        variables: graphQLVariables\n    };\n    const urlWithCountry = `${url}?co=${country}`;\n    // eslint-disable-next-line compat/compat\n    fetch(urlWithCountry, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n            'Content-Type': 'application/json',\n            'indeed-ctk': ctk,\n            'Indeed-API-Key': apiKey\n        },\n        body: JSON.stringify(body)\n    }).catch(() => { });\n};\n"],"names":["registerProvider","id","hostData","Promise","resolve","reject","assertProviderIsLazy","setHostData","window","mosaic","lazyFns","register","then","renderingCache","Map","renderProvider","shouldPrerender","arguments","length","undefined","renderingPromise","injectProviderHtml","_ref","mount","catch","set","ssrHtml","lazyProviders","providerDiv","document","querySelector","providerId","Error","assertProviderDOMPresent","hasPreviouslyBeenRendered","innerHTML","ssrStyles","querySelectorAll","forEach","node","dataEmotionAttribute","getAttribute","indexOf","head","appendChild","setAttribute","err","reason","allSettled","promises","handled","map","promise","value","status","all","_a","docCreateRange","createRange","bind","applyTranslationOverrides","translationScript","nodeToAppend","body","fragment","createContextualFragment","e","console","AD_BLOCKED_CDN","WORKING_CDN","translateUrl","originalUrl","replace","ChangePageResultImpl","constructor","newRegistrations","previousPage","this","_newRegistrations","_map","get","hasOwnProperty","obj","prop","changePage","mosaicGlobal","initializationModel","options","isTestBucketActiveInBrowser","logChangePageDebug","hostId","AvroOptional","initialData","pageId","JSON","stringify","platformLogTk","logTk","providers","newProviders","initModel","host","platform","provider","asChangeModel","MosaicStateManager","platformData","debug","providerRequest","request","newProvidersByZone","providerScriptsToInitialize","providerI18nScriptsToInitialize","_loadProviders","Object","keys","_b","newProvider","isRenderable","result","cssResetProviders","shouldResetCss","providerData","loadMethod","providerLoadMethod","toLowerCase","publicPath","publicPaths","platformLogTkLookup","shouldLogProviderContainerClicks","shouldLogContainerClicks","providerCss","assets","cssUrl","serviceIdLookup","serviceId","metaData","metadata","response","jsUrl","i18nUrl","provideri18N","i18nOverrides","canaryProviders","isCanary","serverRenderedContent","zoneId","errors","existingErrors","providerErrors","Array","isArray","push","prevProvidersByZone","zonedProviders","filter","zoneUpdateStrategies","merged","assign","updatedZonedProviders","loadAll","providerRegistrations","dispatchEvent","Event","getProviderZone","zones","AddProviderResultImpl","globals","mobx","mobxReact","React","ReactDOM","components","Button","Card","Icon","Modal","forms","Checkbox","Select","Textarea","TextInput","ProviderSharedStateStore","states","currentPage","_c","_d","currentPageStates","has","setState","store","getState","state","providerSharedState","api","loadProvider","renderProviderOnce","providerUnmounted","delete","addProvider","_len","_key","providerList","dismissProvider","expiration","url","apiKey","config","endpoints","federator","country","ctk","logTkTypeName","query","variables","input","mosaicProviderInput","trackingKey","trackingKeyType","fetch","method","credentials","headers","_e","_f","_g","_h","_j","_k","_l","_m","isLazy","getCurrentPage"],"sourceRoot":""}